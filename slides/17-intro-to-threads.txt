=== SLIDE 1 ===

1

Introduction to Threads

Framework Training


08/03/2023

Threading


==================================================

=== SLIDE 2 ===

Plan for Session

Python Threads
Thread States
The Thread Class
Creating a Thread
Passing Arguments to a Thread
Multiple Threads
Timers

2

08/03/2023

Threading


==================================================

=== SLIDE 3 ===

Python Threads

Lightweight, pre-emptive, thread of execution
within a single os process
Internal to Python runtime 

Shares the same memory space

Implemented by the class Thread

Have a priority and a state

08/03/2023

Threading

3


==================================================

=== SLIDE 4 ===

Thread States

When a thread object is first created it exists, but it is not yet schedulable; it must be started
It is then runnable
Scheduler may run it 



Thread may need to wait for another thread
Thread remains runnable or running until its run() method terminates



08/03/2023

Threading

4


==================================================

=== SLIDE 5 ===

The Thread Class

Defined in the threading module
Defines a thread in Python
start() Start the thread
run() Method representing the thread’s activity 
Do not call this method.
join(timeout=None) Wait until the receiving thread terminates
name The threads’ name
ident The ‘thread identifier’ of this thread or None if the thread has not been started. This is a nonzero integer
is_alive() True if the run method has not terminated
daemon boolean indicating whether thread is a daemon


08/03/2023

Threading

5


==================================================

=== SLIDE 6 ===

Creating a Thread

Pass a reference to a callable object 
(such as a function or method) 
into the Thread class constructor
this reference acts as the target for the Thread to execute

08/03/2023

Threading

6

from threading import Thread
def simple_worker():    print('hello')
t1 = Thread(target=simple_worker)t1.start()
print(t1.name)print(t1.ident)print(t1.is_alive())

hello
Thread-1 (simple_worker)
123145370800128
False

Thread-1 (simple_worker)
123145370800128
True
hello


==================================================

=== SLIDE 7 ===

Passing Arguments to a Thread

Parameters can be passed to the function to be run by the thread via the args parameter

08/03/2023

Threading

7

from threading import Threadfrom time import sleep
def worker(msg):    for i in range(0, 10):        print(msg, end='', flush=True)        sleep(1)
print('Starting')t1 = Thread(target=worker, args='A')t2 = Thread(target=worker, args='B')t3 = Thread(target=worker, args='C')t1.start()t2.start()t3.start()
print('Done')

Starting
ABCDone
ABCACBABCABCCBAABCABCABCBAC


==================================================

=== SLIDE 8 ===

Passing Arguments to a Thread

Parameters can be passed to the function to be run by the thread via the args parameter

08/03/2023

Threading

8

from threading import Threadfrom time import sleep
def worker(msg):    for i in range(0, 10):        print(msg, end='', flush=True)        sleep(1)
print('Starting')t1 = Thread(target=worker, args='A')t2 = Thread(target=worker, args='B')t3 = Thread(target=worker, args='C')t1.start()t2.start()t3.start()
print('Done')

Starting
ABCDone
ABCACBABCABCCBAABCABCABCBAC


==================================================

=== SLIDE 9 ===

Multiple Threads

What just happened?
the main thread, and three worker threads are all Runnable 
(although only one thread will run at a time). 
This means that once started each worker thread will print out a string, sleep for 1 second and then wait until it is selected to run again
The scheduler will manage execution of runnable threads


08/03/2023

Threading

9


==================================================

=== SLIDE 10 ===

Sharing Data Structures

Threads are using the same process, so communication is easier.

08/03/2023

Threading

10

import threading
import time
import random

def read_sensor_data(queue):
    while True:
        # Simulate reading data from a sensor
        data = random.random()
        queue.append(data)
        time.sleep(1)

def process_data(queue):
    while True:
        if queue:
            data = queue.pop(0)
            # Process data (e.g., update graph)
            print(f"Processing data: {data}")
        time.sleep(0.5)

data_queue = []
thread1 = threading.Thread(target=read_sensor_data, args=(data_queue,))
thread2 = threading.Thread(target=process_data, args=(data_queue,))

thread1.start()
thread2.start()


==================================================

=== SLIDE 11 ===

Timers

Timer class represents an action (or task) 
to run after a certain amount of time has elapsed
Signature of Timer class

Print ‘hello’ after 5 seconds


08/03/2023

Threading

11

from threading import Timer
def hello():    print('hello')
print('Starting')t = Timer(5, hello)t.start()print('Done')

Timer(interval, function)

Starting
Done
hello


==================================================

=== SLIDE 12 ===

Questions?

?

08/03/2023

Threading

12


==================================================

